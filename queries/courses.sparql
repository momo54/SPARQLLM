##
## run with:
## slm-run --load data/courses.ttl --config config.ini --format=turtle -f queries/courses.sparql --debug

prefix ns1: <http://example.org/course/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT DISTINCT ?s ?ku_unit ?ku_source ?ku_score ?ka_hours ?cs_hours ?parcours WHERE {
    ?s ns1:content ?content .
    ?s rdfs:label ?label .
    ?s ns1:objective ?objective .
    ?s ns1:parcours ?parcours .
    FILTER(CONTAINS(?parcours, "ALMA"))
    BIND(ex:SLM-RETRIEVAL_SE(CONCAT("Label: ",STR(?label)," Objectif: ",STR(?objective)," Course content: ", STR(?content)," Course name: ",STR(?s)),?s,10) AS ?retrieval_graph)
    GRAPH ?retrieval_graph {
        ?s <http://example.org/has_ku> ?ku_unit .
        ?s <http://example.org/has_source> ?ku_source .
        ?s <http://example.org/has_score> ?ku_score .
    }
    BIND(ex:SLM-LLMGRAPH_OLLA(CONCAT("""
    We consider a type Knowledge_Unit with the following properties:
        <http://example.org/has_ka_hours>
        <http://example.org/has_cs_hours>
    Extract from the text bellow, KA Core hours and CS Core hours.
    Generate only output JSON-LD instance of the Knowledge_Unit type with
    this format replacing the 0 with the integers you extracted ( ignores "none" considers it to be "0" ):
     "@context": "https://schema.org/",
     "@type": "Knowledge_Unit",
     "http://example.org/has_ka_hours": "0",
     "http://example.org/has_cs_hours": "0",
     <page>""",STR(?test), STR(?ku_unit), "</page>"),?ku_source) AS ?llm)
    OPTIONAL{GRAPH ?llm {
        ?sub <http://example.org/has_ka_hours> ?ka_hours .
        ?sub <http://example.org/has_cs_hours> ?cs_hours .
    }}

}