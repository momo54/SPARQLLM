Foundations of Programming Languages (FPL)
Page: 411

HOURS
CS Core = 21
KA Core = 19

Foundations of Programming Languages: Concepts and Principles
Non-core:

    Introduction to Programming Languages
    a. Syntax and semantics
    b. Types of programming languages (imperative, declarative, functional, object-oriented)
    c. Compilers vs. interpreters
    Formal Grammars and Parsing
    a. Context-free grammars (CFG)
    b. Regular expressions
    c. Syntax trees and parsing techniques
    Programming Language Paradigms
    a. Imperative programming
    b. Functional programming
    c. Logic programming
    d. Object-oriented programming
    Type Systems
    a. Static vs dynamic typing
    b. Type inference and type checking
    c. Type safety and polymorphism
    Control Structures and Flow
    a. Conditionals and loops
    b. Recursion and iterative processes
    c. Exception handling
    Memory Management
    a. Stack vs heap memory
    b. Garbage collection
    c. Memory allocation strategies
    Concurrency and Parallelism
    a. Threading models
    b. Synchronization techniques
    c. Parallel processing in programming languages
    Domain-Specific Languages (DSLs)
    a. Design and implementation of DSLs
    b. Examples and applications of DSLs
    c. Benefits and limitations of DSLs

Illustrative Learning Outcomes:

    Explain the key concepts of programming languages, including syntax, semantics, and language paradigms.
    Demonstrate the use of formal grammars to describe programming language structures.
    Compare and contrast different programming paradigms (imperative, functional, logic, object-oriented).
    Understand and implement type systems and explore their impact on programming language design.
    Analyze memory management techniques and their influence on language performance.
    Develop and implement concurrency models in programming languages.
