SelectQuery(
    p = Project(
        p = Join(
            p1 = Extend(
                p = Extend(
                    p = Join(
                        p1 = Extend(
                            p = ServiceGraphPattern(
                                service_string = SERVICE <http://dbpedia.org/sparql> {
                SELECT *  WHERE {
                    ?university a dbo:University ;
                        dbo:country dbr:France ;
                        dbo:numberOfStudents ?nbetu .
                    OPTIONAL { ?university rdfs:label ?universityLabel . 
                    FILTER (lang(?universityLabel) = "fr") }
                } LIMIT 1
            }
                                term = http://dbpedia.org/sparql
                                graph = SubSelect(
                                    where = GroupGraphPatternSub(
                                        part = [TriplesBlock_{'triples': [[rdflib.term.Variable('university'), rdflib.term.URIRef('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'), rdflib.term.URIRef('http://dbpedia.org/ontology/University'), rdflib.term.Variable('university'), rdflib.term.URIRef('http://dbpedia.org/ontology/country'), rdflib.term.URIRef('http://dbpedia.org/resource/France'), rdflib.term.Variable('university'), rdflib.term.URIRef('http://dbpedia.org/ontology/numberOfStudents'), rdflib.term.Variable('nbetu')]], '_vars': {rdflib.term.Variable('university'), rdflib.term.Variable('nbetu')}}, OptionalGraphPattern_{'graph': GroupGraphPatternSub_{'part': [TriplesBlock_{'triples': [[rdflib.term.Variable('university'), rdflib.term.URIRef('http://www.w3.org/2000/01/rdf-schema#label'), rdflib.term.Variable('universityLabel')]], '_vars': {rdflib.term.Variable('university'), rdflib.term.Variable('universityLabel')}}, Filter_{'expr': RelationalExpression_{'expr': Builtin_LANG_{'arg': rdflib.term.Variable('universityLabel'), '_vars': {rdflib.term.Variable('universityLabel')}}, 'op': '=', 'other': rdflib.term.Literal('fr'), '_vars': set()}, '_vars': set()}], '_vars': {rdflib.term.Variable('university'), rdflib.term.Variable('universityLabel')}}, '_vars': {rdflib.term.Variable('university'), rdflib.term.Variable('universityLabel')}}]
                                        _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('nbetu'), rdflib.term.Variable('universityLabel')}
                                        )
                                    limitoffset = LimitOffsetClauses(
                                        limit = 1
                                        _vars = set()
                                        )
                                    _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('nbetu'), rdflib.term.Variable('universityLabel')}
                                    )
                                _vars = set()
                                )
                            expr = Function(
                                iri = http://example.org/SEGRAPH
                                distinct = []
                                expr = [Builtin_REPLACE_{'arg': rdflib.term.Literal('UNIV France'), 'pattern': rdflib.term.Literal('UNIV'), 'replacement': Builtin_STR_{'arg': rdflib.term.Variable('universityLabel'), '_vars': {rdflib.term.Variable('universityLabel')}}, '_vars': {rdflib.term.Variable('universityLabel')}}, rdflib.term.Variable('university')]
                                _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('universityLabel')}
                                )
                            var = graph
                            _vars = {rdflib.term.Variable('graph')}
                            )
                        p2 = Graph(
                            term = graph
                            p = BGP(
                                triples = [(rdflib.term.Variable('university'), rdflib.term.URIRef('http://example.org/has_uri'), rdflib.term.Variable('uri'))]
                                _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('uri')}
                                )
                            _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('uri')}
                            )
                        lazy = True
                        _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('uri')}
                        )
                    expr = Function(
                        iri = http://example.org/BS4
                        distinct = []
                        expr = [rdflib.term.Variable('uri')]
                        _vars = {rdflib.term.Variable('uri')}
                        )
                    var = page
                    _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('uri'), rdflib.term.Variable('page')}
                    )
                expr = Function(
                    iri = http://example.org/LLMGRAPH
                    distinct = []
                    expr = [Builtin_REPLACE_{'arg': rdflib.term.Literal('generate in JSON-LD a schema.org representation for a type university of : <page> PAGE </page>. Output only JSON-LD'), 'pattern': rdflib.term.Literal('PAGE'), 'replacement': Builtin_STR_{'arg': rdflib.term.Variable('page'), '_vars': {rdflib.term.Variable('page')}}, '_vars': {rdflib.term.Variable('page')}}, rdflib.term.Variable('university')]
                    _vars = {rdflib.term.Variable('university'), rdflib.term.Variable('page')}
                    )
                var = g
                _vars = {rdflib.term.Variable('uri'), rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('g'), rdflib.term.Variable('page')}
                )
            p2 = Graph(
                term = g
                p = BGP(
                    triples = [(rdflib.term.Variable('toto'), rdflib.term.URIRef('http://example.org/has_schema_type'), rdflib.term.Variable('o'))]
                    _vars = {rdflib.term.Variable('o'), rdflib.term.Variable('toto')}
                    )
                _vars = {rdflib.term.Variable('o'), rdflib.term.Variable('g'), rdflib.term.Variable('toto')}
                )
            lazy = False
            _vars = {rdflib.term.Variable('o'), rdflib.term.Variable('uri'), rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('g'), rdflib.term.Variable('page'), rdflib.term.Variable('toto')}
            )
        PV = [rdflib.term.Variable('universityLabel'), rdflib.term.Variable('uri'), rdflib.term.Variable('o')]
        _vars = {rdflib.term.Variable('o'), rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('g'), rdflib.term.Variable('universityLabel'), rdflib.term.Variable('uri'), rdflib.term.Variable('page'), rdflib.term.Variable('toto')}
        )
    datasetClause = None
    PV = [rdflib.term.Variable('universityLabel'), rdflib.term.Variable('uri'), rdflib.term.Variable('o')]
    _vars = {rdflib.term.Variable('o'), rdflib.term.Variable('university'), rdflib.term.Variable('graph'), rdflib.term.Variable('g'), rdflib.term.Variable('universityLabel'), rdflib.term.Variable('uri'), rdflib.term.Variable('page'), rdflib.term.Variable('toto')}
    )
None